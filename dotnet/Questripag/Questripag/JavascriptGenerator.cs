using Microsoft.AspNetCore.Mvc;
using System.Reflection;
using System.Text.Json;
using System.Text.RegularExpressions;

namespace Questripag;

public class JavascriptGenerator
{
    public bool GenerateTypescript { get; private set; }
    public JavascriptGenerator(bool generateTs)
    {
        GenerateTypescript = generateTs;
    }

    public string Generate(Assembly assembly)
        => Generate(assembly.GetTypes().Where(x => x.IsAssignableTo(typeof(Controller))).SelectMany(x => x.GetMethods(BindingFlags.Instance | BindingFlags.Public)));

    public string Generate(IEnumerable<MethodInfo> methods)
    {
        var asConst = GenerateTypescript ? " as const" : "";
        return $"""
            /* tslint:disable */
            /* eslint-disable */
            //----------------------
            // <auto-generated>
            //     Generated using Questripag.Generator.Js
            // </auto-generated>
            //----------------------      
            
            export const dataTypes = {GenerateDataTypes()}{asConst};
            export const endpoints = {GenerateData(methods)}{asConst};
            """;
    }

    private string GenerateDataTypes()
    {
        return $"[{string.Join(", ", Enum.GetValues<PropertyType>().Select(x => $"\"{x}\""))}]";
    }

    private string GenerateData(IEnumerable<MethodInfo> methods)
    {
        var methodsDict = new Dictionary<string, Dictionary<string, PropertyConfig>>();
        foreach (var method in methods)
        {
            var propertiesDict = new Dictionary<string, PropertyConfig>(StringComparer.InvariantCultureIgnoreCase);
            var responseType = method.ReturnType.UnwrapPageArgument();
            if (responseType != null)
            {
                foreach(var prop in responseType.GetProperties())
                {
                    propertiesDict[prop.SerializationName()] = new PropertyConfig {Response = true, ClrType = prop.PropertyType};
                }
            }
            var requestType = method.GetParameters().Select(x => x.ParameterType.UnwrapQueryArgument()).FirstOrDefault(x => x != null);
            if (requestType != null)
            {
                foreach (var prop in requestType.GetProperties())
                {
                    var config = propertiesDict.GetValueOrDefault(prop.SerializationName(), new() { ClrType = prop.PropertyType });
                    config.Filter = prop.IsFilterProp();
                    config.Order = prop.IsOrderProp();
                    propertiesDict[prop.SerializationName()] = config;
                }
            }
            propertiesDict = new Dictionary<string, PropertyConfig>(propertiesDict.Where(x => x.Value.Response || x.Value.Order || x.Value.Filter));
            if (propertiesDict.Any())
            {
                methodsDict[method.Name] = propertiesDict;
            }
        }
        var result = JsonSerializer.Serialize(methodsDict, new JsonSerializerOptions
        {
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
            WriteIndented = true,
        });
        return Regex.Replace(result, "\"([\\$\\w]+)\":", "$1:");
    }
}
